---
title: "SpaceAndTime"
format: html
editor: visual
---


```{r tidy=TRUE, tidy.opts=list(width.cutoff=72), echo=FALSE, output=FALSE}
rm(list = ls())

library(class) # this has the knn function
library(ggplot2)
library(tidyverse)
library(tidyr)
library(DataExplorer)

netherlandsDF = read_csv("assessmentData/netherlands.csv")
californiaDF = read_csv("assessmentData/maxTempCalifornia.csv")
AMOCDF = read_csv("assessmentData/AMOCdata.csv")
metadataDF = read_csv("assessmentData/metadataCA.csv")

#install.packages('gstat')
library(geoR)
library(viridis)
library(sp)
library(gstat)
library(forecast)


```

## Question 1 Spatial modelling dutch

### 1 a)

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72)}

ggplot(data = netherlandsDF) +
  geom_point(aes(x = longitude, y = latitude, size = precip, color = precip)) +
  scale_color_continuous(low = "blue", high = "red") +
  labs(title = "Precipitation in Netherlands Stations",
       x = "Longitude",
       y = "Latitude",
       size = "Precipitation",
       color = "Precipitation") +
  theme_minimal()

```
From what we can see from the data it does seem to be spatially correlated as we can that the Dutch provinces of north Holland, Friesland and Groningen has higher precipitation and as we go south the precipitation does decrease as we can see from the Dutch provinces of Zeeland, north Brabant and Limburg where precipitation is significantly lower than their northern counterparts. 

From this data, latitude seems to be the biggest factor in the variation of the precipitation as the longitude only suggests some slight variations in the data.


```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

# Create geodata object
precip_geoR <- as.geodata(netherlandsDF, coords.col = c("longitude", "latitude"), data.col = "precip")

```

### 1 b)

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

# set seed for reproducibility
set.seed(26041999)

# Select 3 random rows from the data frame
random_rows <- netherlandsDF %>% sample_n(3)

# Add a new column with labels
random_rows$label <- c("A", "B", "C")

# Print the randomly selected rows
random_rows

```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

# Remove the selected rows from the original dataset
netherlandsDF_filtered <- netherlandsDF %>% anti_join(random_rows)

# Print the resulting dataframe
netherlandsDF_filtered

```

### 1 c)

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

##converting the dataframe into a geodata object

coordinates(netherlandsDF) <- c("longitude", "latitude")
proj4string(netherlandsDF) <- CRS("+proj=longlat +datum=WGS84")

netherlandsDF_geodata <- as.geodata(netherlandsDF)



sample_variogram <- variogram(precip~1, netherlandsDF)

plot(sample_variogram, type = "b", main = "Variogram: Percipitation over Netherlands")


# # Calculate empirical variogram
# precip_variog <- variog(precip_geoR)
# 
# # Plot empirical variogram
# plot(precip_variog)



```
From the plotted variogram we can see there a very clear need for a nugget as there is a non-zero value around zero distance.

The semi variance continuous to increase with distance, as such there is no clear trend to help us decide in a clear cut off to set as our maximum distance, as such it is better to compare multiple models with different maximum distances to determine the most optimal maximum distance.

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72), eval=FALSE, echo=FALSE}

coordinates(netherlandsDF) <- ~longitude+latitude
geodata <- as.geodata(netherlandsDF, coords.col = 1:2, data.col = 4)

sample_variogram <- variog(geodata)


```

### 1 d)

## TODO

Initial asusmptions:

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

# Create a grid for interpolation
grid <- expand.grid(longitude = seq(min(netherlandsDF$longitude), max(netherlandsDF$longitude),
          length.out = 100),
          latitude = seq(min(netherlandsDF$latitude), max(netherlandsDF$latitude), length.out = 100))

coordinates(grid) <- ~longitude + latitude
gridded(grid) <- TRUE

# Perform ordinary Kriging
kriging_result <- krige(precip ~ 1, netherlandsDF, grid, model = fitted_variogram)


```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

## Question 2

### 2 a)

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

AMOCDF$Date = as.Date(AMOCDF$Date, format = "%d/%m/%Y")

## I will now make a column with the quarter and year that I will use to create the averages per quarter
AMOCDF$YearQuarter <- paste(AMOCDF$Year, AMOCDF$Quarter, sep = "-")

YearQuarterAverage <- AMOCDF %>%
  group_by(YearQuarter) %>%
  summarise(AverageStrength = mean(Strength))



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72), echo=FALSE, eval=FALSE }

## nevermind ts object does this

YearQuarterAverage$Year = str_extract(YearQuarterAverage$YearQuarter, "\\d{4}")

YearQuarterAverage$Quarter <- str_extract(YearQuarterAverage$YearQuarter, "(?<=Q)\\d")

YearQuarterAverage$YearLabel <- ifelse(YearQuarterAverage$Quarter == 1,
                                       YearQuarterAverage$Year,"")

# plot with year label
ggplot(YearQuarterAverage, aes(x = YearQuarter, y = AverageStrength)) +
  geom_point() +
  geom_smooth(method = "lm") +
  xlab("Year") +
  ylab("Average Strength") +
  ggtitle("Average Strength by Year") +
  scale_x_discrete(labels = function(x) ifelse(seq_along(x) %% 4 == 1, x, ""))

#write.csv(YearQuarterAverage, "data.csv", row.names=FALSE)



```


```{r tidy=TRUE, tidy.opts=list(width.cutoff=72)}


tsAtlantic <- ts(YearQuarterAverage, start = c(2010, 1), frequency = 4)

plot(tsAtlantic)


```
## TODO more trends

From this graph we can see a yearly oscillation of Sverdrups. We can also identify that the peaks in Sverdrups are usually in the last quarter before the start of a new year and the valleys are on the second quarter of the year.

### 2 b)

First we will start by checking the ACF(Autocorrelation Function) and PACF(Partial Autocorrelation Function) to check for if we have stationary data or not to help us decide between an ARMA or an ARIMA model.

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

acf(tsAtlantic)


```

We can see that for ACF there is a 

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }

pacf(tsAtlantic)

```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```

```{r tidy=TRUE, tidy.opts=list(width.cutoff=72) }



```